package Core;

import java.util.ArrayList;
import java.util.List;

import InvertedIndexExample.InvertedIndexJob;
import Master.Master;
import Master.ParticipantStub;
import Participant.Mapper;
import Participant.ParticipantInfo;
import Participant.Reducer;
import WordCountJobExample.WordCountJob;

public class Main {

	private static final String CONFIG_FILE = "Config.txt";
	private static final String CONFIG_FILE_LOCAL = "Config_Local.txt";

	private static final String WORD_COUNT_INPUT_FILE = "SampleInput.txt";
	private static final String WORD_COUNT_OUTPUT_FILE = "WordCountOutput.txt";
	private static final String INVERTED_INDEX_FILE = "InvertedIndexOutput.txt";
	private static final int LINES_PER_BLOCK = 50;
	private static final boolean SORTED = true;

	public static void main(String[] args) {
		// Test Participant on Localhost
		//testOnLocal(false);

		// Actual
		actualMain(args);
	}

	private static void actualMain(String[] args) {
		// Participant
		if (args.length == 5) {
			// hostname, port, cpuCount, ID
			ParticipantInfo participantInfo = new ParticipantInfo(args[0],
					Integer.parseInt(args[1]), Integer.parseInt(args[2]),
					Integer.parseInt(args[3]));
			if (args[4].equals("Mapper")) new Mapper(participantInfo);
			else if (args[4].equals("Reducer")) new Reducer(participantInfo);
			else System.out.println("Wrong participant type");
		}
		// Server
		else if (args.length == 3 || 
				(args.length == 4 && args[3].equals("autoprint"))) {
			
			int jobID = Integer.parseInt(args[0]);
                        
			String job = args[1];
			int delay = Integer.parseInt(args[2]);
			boolean autoPrint = false;
			if (args.length == 4)
				autoPrint = true;
			else
				autoPrint = false;
			
			if (args[1].equals("WordCountExample"))
				wordCountExample(jobID, CONFIG_FILE, delay, false);
			else if (args[1].equals("InvertedIndexExample"))
				invertedIndexExample(jobID, CONFIG_FILE, delay, autoPrint);
			else
				System.out.println("Unsupported Job");
			
		} else {
			System.out.println("Master Usage: <job ID> <job name> <delay time> [auto print]\n"
					+ "Slave Usage: <hostname> <port> <cpu count> <nodeID>");
		}
	}

	private static void testOnLocal(boolean autoPrint) {
		new Thread(new Runnable() {
			ParticipantInfo participantInfo = new ParticipantInfo("localhost",
					5100, 1, 1);

			public void run() {
				new Mapper(participantInfo);
			}
		}).start();

		new Thread(new Runnable() {
			ParticipantInfo participantInfo = new ParticipantInfo("localhost",
					5200, 1, 2);

			public void run() {
				new Mapper(participantInfo);
			}
		}).start();

		new Thread(new Runnable() {
			ParticipantInfo participantInfo = new ParticipantInfo("localhost",
					5300, 1, 3);

			public void run() {
				new Mapper(participantInfo);
			}
		}).start();

		new Thread(new Runnable() {
			ParticipantInfo participantInfo = new ParticipantInfo("localhost",
					5400, 1, 4);

			public void run() {
				new Mapper(participantInfo);
			}
		}).start();

		new Thread(new Runnable() {
			ParticipantInfo participantInfo = new ParticipantInfo("localhost",
					5500, 1, 5);

			public void run() {
				new Reducer(participantInfo);
			}
		}).start();

		new Thread(new Runnable() {
			ParticipantInfo participantInfo = new ParticipantInfo("localhost",
					5600, 1, 6);

			public void run() {
				new Reducer(participantInfo);
			}
		}).start();

		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			System.out.println("Error: " + e.toString());
		}

		// Start Job on Master
		//wordCountExample(1, CONFIG_FILE_LOCAL, autoPrint);
		//invertedIndexExample(2, CONFIG_FILE_LOCAL, delay, autoPrint);
	}

	private static void wordCountExample(int jobID, String config, int delay, boolean autoPrint) {

		// Load participants
		List<ParticipantStub> mapperStubs = new ArrayList<ParticipantStub>();
		List<ParticipantStub> reducerStubs = new ArrayList<ParticipantStub>();
		Utils.getMappersAndReducers(config, mapperStubs, reducerStubs);
		displayParticipants(mapperStubs, reducerStubs);

		// Create job
		WordCountJob wordCountJob = new WordCountJob(jobID,
				WORD_COUNT_INPUT_FILE, LINES_PER_BLOCK, delay);

		// Create and start master to handle scheduling
		Master master = new Master(mapperStubs, reducerStubs, wordCountJob,
				WORD_COUNT_OUTPUT_FILE, SORTED, autoPrint);
		master.start();

		if (!autoPrint) {
			UserInteraction.beginUserInteraction(master);
		}
	}

	private static void invertedIndexExample(int jobID, String config, int delay, boolean autoPrint) {

		// Load participants
		List<ParticipantStub> mapperStubs = new ArrayList<ParticipantStub>();
		List<ParticipantStub> reducerStubs = new ArrayList<ParticipantStub>();
		Utils.getMappersAndReducers(config, mapperStubs, reducerStubs);
		displayParticipants(mapperStubs, reducerStubs);

		// Create job
		InvertedIndexJob invertedIndexJob = new InvertedIndexJob(jobID,
				WORD_COUNT_INPUT_FILE, LINES_PER_BLOCK, delay);

		// Create and start master to handle scheduling and reduce
		Master master = new Master(mapperStubs, reducerStubs, invertedIndexJob,
				INVERTED_INDEX_FILE, SORTED, autoPrint);
		master.start();
		
		if (!autoPrint) {
			UserInteraction.beginUserInteraction(master);
		}
	}

	private static void displayParticipants(List<ParticipantStub> mapperStubs,
			List<ParticipantStub> reducerStubs) {
		for (ParticipantStub mapperStub : mapperStubs) {
			System.out.printf("%s %d: host=%s port=%d #cpu=%d\n", "Mapper ID",
					mapperStub.getID(), mapperStub.getHost(),
					mapperStub.getPort(), mapperStub.getCPUCount());
		}
		for (ParticipantStub reducerStub : reducerStubs) {
			System.out.printf("%s %d: host=%s port=%d #cpu=%d\n", "Reducer ID",
					reducerStub.getID(), reducerStub.getHost(),
					reducerStub.getPort(), reducerStub.getCPUCount());
		}
		System.out.println("");
	}
}
